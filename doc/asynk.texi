\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename asynk.info
@settitle ASynK User Manual
@c %**end of header

@copying
This file documents ``ASynK - Awesome Sync (by Karra)''

Copyright (C) 2011, 2012 Sriram Karra <karra.etc@@gmail.com>

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3;
with the Invariant Section being ``GNU GENERAL PUBLIC LICENSE,''
A copy of the license is included in the section entitled
``GNU Free Documentation License.''
@end quotation
@end copying

@titlepage
@title ASynK: Awesome Sync (by Karra)
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, , 
@top ASynK User Manual

@insertcopying
@end ifnottex

@menu
* Introduction::               What is ASynK, and why should you be interested.
* Installation::               Fetching and installing ASynK
* Concepts::               Things you must know to use ASynK
* Using ASynK::               How to execute ASynK. Various commands and flags.
* Recipes::               Typical user flows
* FAQ::               Frequently Asked Questions

Appendices
* Copying::                     The GNU General Public License gives you permission
                         to redistribute GNU Emacs on certain terms;
                         it also explains that there is no warranty.
* GNU FDL::  The license for this documentation.
* The Index::                   Complete index.

@end menu

@node Introduction, Installation, Top, Top
@chapter Introduction

ASynK is a flexible Contacts synchronization program that works with a
variety of Contacts software such as Microsoft Outlook, Google Contacts, and
Emacs BBDB.

If you would not read through this documentation from cover to cover, but
rather learn by looking at examples, head straight to the section titled
``Recipes''. It contains enough examples to help you get going.

So, where were we? Ah, yes, introducting ASynK. Here are some of the high
level features of ASynK:

@enumerate

@item
ASynK allows bidirectional sync of Contact across any pair of sources from:
Google Contacts, Microsoft Outlook, and Emacs BBDB - what we call
PIM DBs (for Personal Information Management Databases)

@item
ASynK is the only two-way synchronization software for BBDB known to be in
existence today. So if you are keen to keep BBDB content synchronized with a
mobile device or Outlook, look no further.

@item
ASynK works on Windows, MacOS X, and Linux

@item
Synchronization is granular to the level of 'Folders', i.e. you can
synchronize one folder of Google Contacts with a Outlook folder (on Windows at
work, say), and another Google folder in the same account with BBDB (On your
Mac, say)

@item
The infrastructure is there to add more database and item types (i.e. tasks,
notes, etc.), but currently only Contact synchronization for Google Contacts,
BBDB and Outlook supported

@item
It is free software, and released under the GNU AGPL (Affero GPL)
version 3

@end enumerate

@node Installation, Concepts, Introduction, Top
@chapter Getting ASynK and Installation

The official website for ASynK is at: @url{http://karra-asynk.appspot.com,
here}. You will find links to latest download, complete documentaiton, and
other information on that website.

The source code for ASynK is hosted on Github at:
https://github.com/skarra/AsynK (earlier hosted at:
https://github.com/skarra/Gout) Visit the site to grab the bleeding edge
development version, or to register an issue you have identified.

@section Pre-packaged Bundle
The latest release as of this writing is v0.2. You can download the latest
version by visiting the downloads section of the official website
@url{http://karra-asynk.appspot.com/downloads/, here}.

@section From Source
You can clone the git repository by using a command such as @kbd{git clone
git://github.com/skarra/ASynK.git}. Then run @kbd{asynk.py} as per
instructions given in the @ref{Using ASynK, Using ASynK}, section below.

@section Dependencies
@enumerate
@item
@strong{Python 2.7}. You can download Python from:
@url{http://www.python.org/download/releases/, here}

@item
@strong{autoconf} suite of tools are needed if you want to build the
documentatation from the source texi files. It is not required if you only
want to execute the ASynK program. The latest documentation is available on
the project website on appspot.com
@end enumerate

@subsection Windows / Outlook Specific Dependencies
If you want to synchronize to MS Outlook, you will need to install these
additional packages on Windows:

@enumerate
@item
@strong{Pywin32 for Python 2.7}: It is available for download 
@url{http://sourceforge.net/projects/pywin32/files/pywin32, here}
@end enumerate

@node Concepts, Using ASynK, Installation, Top
@chapter Concepts

This chapter explains some of the key terminology we will use through the rest
of this documentation. This is also required reading before you can dig into
the code, if you are so inclined.

@section Your Information and How it is Organized
@subsection @dfn{PIMDB}s
Google, MS Outlook and BBDB are know as ``PIM Databases'', and each is a ``PIM
DB'', or @dfn{pimdb}. PIM stands for Personal Information Manager. PIMDB is
PIM Database.

Each PIMDB is referred to using a unique two letter specifier -'bb' for
BBDB, 'gc' for Google Contacts, and 'ol' for Outlook. This two letter
specifier is called a @dfn{dbid}

@subsection @dfn{Item}s
Your personal information collection includes contacts, notes, appointments,
and tasks. In AsynK we refer to each piece of PIM information in your
databases as an @dfn{Item}. When we want to refer a specific type of Item we
would refer to them as Items - @dfn{Contact}, @dfn{Task}, @dfn{Note}, or
@dfn{Appointment} as applicable.

Every Item has an ID known as a @dfn{ItemID} that is guaranteed to be
unique within its containing @dfn{Folder}.

A pimdb can contain one or more Item types. Outlook supports all of
them. Google covers Contacts and Appointments well, and BBDB only does
contacts. In future we will be able to deal with all the contact types, but
for now, the only support is for Contacts.

@subsection @dfn{Message Store}
Instead of defining a message store in general terms, let me just give you
what they are for each of the @dfn{PIMDB}s we have.

In Google, a @dfn{Message Store} is identified by a user login/password. If
you have two Google accounts you have access to two @dfn{Message Store}s on
Google Contacts.

With MS Outlook, there is a built in concept of a @dfn{MessageStore}. Each
account you create becomes a @dfn{Message Store}. If you add a PST file to your
profile, it becomes a distinct @dfn{Message Store}. Essentially, The ASynK
@dfn{Message Store} corresponds directly with a Outlook Message Store.

A Note on Outlook Profiles: ASynK only works on the default Outlook Profile,
and the contained Stores, folders, and contacts. This is important to keep in
mind. You cannot specify a different Outlook profile to operate on.

@cindex Outlook Profile

And finally, in BBDB, a BBDB file is the @dfn{Message Store}. Simple :)

@subsection @dfn{Folders}
@dfn{Message Stores} are logically divided into @dfn{Folder}s. Google and
Outlook internally organize their items into Folders (Google actually calls
them Groups), but there is no native folder support in BBDB. 

Folders are assigned a unique ID determined by the PIMDB, and typically when
the folder is created. ASynK provides a way of viewing the available folders,
their names, and IDs in a given @dfn{PIMDB} / @dfn{Message Store}.

@subsubsection Folders in BBDB
The fact that there is no native folder support in BBDB is more than offset by
the fact that is infinitely customizable, and we can support a user-level
model of folders as we wish. This is how it works:

Normally, all the contacts in a BBDB @dfn{store} will be in a folder called
@dfn{default}. If, however, a contact has a notes field with key titled
@dfn{folder}, it will be put into the logical folder with the name specified
in the value part of that BBDB notes. For e.g. if @code{(``folder''
. ``Buddies'')} is a notes field in a contact, the ASynK will treat it as
being in the folder called @dfn{Buddies}.

If you do not like the @dfn{folder} key for your BBDB notes field, and want to
call it @dfn{group} instead, you can do that too. Refer to the Customizing
AsynK chapter below on how this can be done.

A BBDB folder's Name and ID are the same, and are taken from the value of the
notes field as explained above.

@section ASynK Profile
ASynK allows you to keep any folder in a pimdb in sync with any folder in one
of the other pimdbs. The configuration and state of synchronization between a
pair of folders is captured in a sync @dfn{Profile}. Most ASynK operations
operate on a specified sync profile. So you will need to set up at least one
profile before you can play with ASynK.

EachProfile has the following information associated with it:

@enumerate
@item
@strong{Name}: A unique alphanumeric string that identifies the profile, and
is required for most sync operations. This is specified at the time of profile
creation, and has to be provided by the user. A profile's name cannot be
changed after creation.

@item
@strong{Folder IDs}: The IDs for the two folders that are to be synched. The
required IDs have to be specified by the user at the time of profile
creation. The IDs are assigned by the PIM DBs when the folders are
created. ASynK can be used to list the existing folders in a PIMDB and their
IDs, so the user can user the appropriate IDs at profile creation time.

@item
@strong{DB IDs}: Two DB IDs that hold the folders that are to be synched. This
is specified at the time of profile creation and has to be specified by the
user. They have to one of the supported DB IDs, which are 'bb', 'gc', and
'ol', in this version. The order in which the DB IDs are specified matters -
as explained below.

@item
@strong{Sync Timestamps}: The start and end of the last successful sync
operation for this profile.  The end of the last sync is the timestamp used to
query the pimdbs for updates that have to be synched. These are initialized
and updated automatically by the system and you do not have to worry about
it.

@item
@strong{Conflict Resolution Direction}: Occassionally one ends up editing an
item in multiple places or devices, and this situation leads to a conflict -
i.e. the same item has been updated since the last sync on both ends. There is
no magic way to figure out which is the correct version. So we have to use a
pre-determined tie breaker. This parameter tells the system in which direction
to resolve this conflict. This field can be specified at the time of profile
creation, but defaults to the first dbid specified in the profile. Once
profile is created, the direction of confict resolution cannot be specified
for a operation.

@item
@strong{Sync Direction}: Although ASynK is designed to be a two way sync, you
might be interested in setting up certain profiles to sync in only one
direction - i.e. new entries and updates to existing entries will only flow in
one direction. This can be specified at the time of profile creation and also
be specified for every sync operation. If it is a one way sync, currently the
flow will be from db1 to db2 (i.e. the first db in the profile to the second
db). Note: This has to be fixed.
@end enumerate

@node Using ASynK, Recipes, Concepts, Top
@chapter Using ASynK

@section Invoking Help
As of the latest version, only a command line interface is available. There
are plans to provide a browser based UI at a later stage.

To run ASynK, change to the root of the downloaded ASynK directory, and type
@command{python asynk.py -h} to get a detailed help screen as show below. In
the following sections we look at each of the flags and options in detail (in
time, of course).

@verbatim
Cardassia:Gout sriramkarra$ python asynk.py -h
usage: asynk.py [-h] [--dry-run]
                [--op {list-folders,create-folder,create-store,show-folder,
                       del-folder,list-profiles,create-profile,show-profile,
                       del-profile,sync,startweb,clear-sync-artifacts}]
                [--db {bb,gc,ol} [{bb,gc,ol} ...]] [--store STORE [STORE ...]]
                [--folder FOLDER [FOLDER ...]] [--item ITEM] [--name NAME]
                [--direction {1way,2way}] [--label-regex LABEL_REGEX]
                [--conflict-resolve CONFLICT_RESOLVE] [--pwd PWD]
                [--port PORT] [--log {debug,info,error,critical}] [--version]

ASynK: PIM Awesome Sync by Karra

optional arguments:
  -h, --help            show this help message and exit
  --dry-run             Do not sync, but merely show what will happen if a
                        sync is performed.
  --op {list-folders,create-folder,create-store,show-folder,del-folder,
        list-profiles,create-profile,show-profile,del-profile,sync,startweb,
        clear-sync-artifacts}
                        Specific management operation to be performed.
  --db {bb,gc,ol} [{bb,gc,ol} ...]
                        DB IDs required for most actions. Some actions need
                        two DB IDs - do it with two --db flags. When doing so
                        remember that order might be important for certain
                        operations.
  --store STORE [STORE ...]
                        Specifies store ID(s) to be operated on.
  --folder FOLDER [FOLDER ...]
                        For operations that need folder ids, this option
                        specifies them. More than one can be specified
                        separated by spaces
  --item ITEM           For Item operations specify the ID of the Item to
                        operate on.
  --name NAME           For profile operations, specifies profile name. For
                        Folder operations, specifies folder name
  --direction {1way,2way}
                        Specifies whether a sync has to be unidirectional or
                        bidirectional. Defaults to bidiretioanl sync, i.e.
                        "2way"
  --label-regex LABEL_REGEX
                        A regular expression for sync artification to be
                        cleared from specified folder. This is to be used
                        independently of any sync profile.
  --conflict-resolve CONFLICT_RESOLVE
                        Specifies how to deal with conflicts in case of a
                        bidirectional sync and an item is modified in both
                        places. value should be one of the two dbids that are
                        already specified.
  --log {debug,info,error,critical}
                        Specify level of logging.
  --version             show program's version number and exit

Google Authentication:
  --pwd PWD             Google password. Relevant only if --db=gc is used. If
                        this option is not specified, user is prompted
                        password from stdin
@end verbatim

@node Recipes, FAQ, Using ASynK, Top
@chapter Recipes

The easiest way to get used to AsynK is to look at some examples. This chaper
contains some of the simplest use cases. You can refer to section @ref{Using
ASynK, Using ASynK}, for detailed documentaiton on each flag, legal and
illegal options, etc.

@section Explore Folders and Create Synk Profile
@enumerate
@item
Determine the PIMDBs you want to sync - i.e. select two from @kbd{bb},
@kbd{gc}, and @kbd{ol}

@item
Determine the Message Stores you want to sync - remember that for Google, a
message store is an account with login credentials, for Outlook it maps to an
Outlook MessageStore, and for BBDB it is a file - specified by a filename. The
Stores are specified with the @kbd{--store=<storeid, storeid>} option.

@item
List the folders you have in your Message Stores to identify the folders that
actually contain the Items you want to synchronize.

@verbatim
Cardassia:Gout sriramkarra$ python asynk.py --op=list-folders --db gc --store karra.etc < login.auth
[18:08:08.216     INFO] Debug logging to file: /Users/sriramkarra/stuff/code/python/Gout/logs/asynk_logs.2012-05-09.18-08-08.216602
[18:08:08.572     INFO] Logging into Google...
[18:08:10.603     INFO] Listing all folders in PIMDB gc...
[18:08:11.797     INFO]   0: Contacts Name: System Group: My Contacts ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/6
[18:08:11.797     INFO]   1: Contacts Name: System Group: Friends     ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/d
[18:08:11.797     INFO]   2: Contacts Name: System Group: Family      ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/e
[18:08:11.797     INFO]   3: Contacts Name: System Group: Coworkers   ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/f
[18:08:11.797     INFO]   4: Contacts Name: TestBB                    ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/2fae451c0fe771d5
[18:08:11.797     INFO]   5: Contacts Name: Gout                      ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/41baff770f898d85
[18:08:11.798     INFO]   6: Contacts Name: Starred in Android        ID: http://www.google.com/m8/feeds/groups/karra.etc%40gmail.com/base/5254f4a808c5e7d8
[18:08:11.798     INFO] Listing all folders in PIMDB gc...done
@end verbatim

The output should be self explanatory. The group ID is the full URI in the
last column of output.

@verbatim
Cardassia:Gout sriramkarra$ python asynk.py --op=list-folders --db bb --store test/bbdb.utah.ver7
[18:27:07.147     INFO] Debug logging to file: /Users/sriramkarra/stuff/code/python/Gout/logs/asynk_logs.2012-05-09.18-27-07.147160
[18:27:07.149     INFO] Parsing BBDB file /Users/sriramkarra/stuff/code/python/Gout/test/bbdb.utah.ver7...
[18:27:07.396     INFO] Successfully parsed 338 entries.
[18:27:07.396     INFO] Listing all folders in PIMDB bb...
[18:27:07.396     INFO]   1: Contacts.	Name: default;	GID: default;	
[18:27:07.396     INFO] Listing all folders in PIMDB bb...done
@end verbatim

We are passing the relative path of a BBDB file to list-folders. It is a
typical BBDB database file with no contacts containing the @kbd{folder} notes
field, hence all of them are put in the ``default'' folder. 

Note how the name and ID of the folder are the same.

@cindex Folder listing

@item
Optionally you would like to create a folder in one of the Message Stores to
hold your synchronized contacts

@item
You would create up a sync profile that specifies the various details ASynK needs
to know to perform a sync. (See section ASynK Profile). From here on
your regular sync is done through a reference to the profile name, and you do
not have to type out all the confusing IDs etc. every time.

@end enumerate

@section Sync Actions and Related Cleanup
@enumerate
@item
Perform a ``dry run'' to get a sense of how many contacts are going to get
copied from where to where.

@item
Perform the actual sync, rinse, repeat.

@end enumerate

@section Misc Housekeeping Activities
@enumerate
@item
List all profiles

@item 
Delete a profile

@item
Clear out the sync tags and such stored in the actual contact itself without
deleting the profile

@item
Show a summary of Items in a given folder.

@end enumerate

@node FAQ, Copying, Recipes, Top
@chapter FAQ

Here are some Frequently Ask-able Questions, along with answers.

@section What's Changed between v0.1 and v0.2?
It's almost a total rewrite. Here are main changes:

@enumerate
@item
v0.2 adds support for Emacs BBDB. At this time ASynK is the only available
working program that does bidirectional sync of BBDB to any other PIM
database.

@item
v0.1 was designed only for MS Outlook and Google Contacts. As a result it was
designed to run on Windows only, and there is a mandatory dependency on
PyWin32.

v0.2 works on Linux, Mac and Windows. Only if MS Outlook support is needed, a
third party library called PyWin32 is needed.

@item
v0.1 was distributed as a packaged Windows binary and the only user interface
was a GUI built with WxPython (required the user to install an additional
third party library)

v0.2 UI is purely command line, even on Windows.

@item 
v0.2 introduces the concept of sync profiles and folder-folder sync, which is
much more advanced than what we had earlie. v0.1 always did a sync between the
default contacts folder in the default message store with a newly created
folder called Gout on google.

@end enumerate

@section Other Comparable Tools
@subsection What's wrong with Google's tools?

Google's tools are not as versatile as ASynK. I started work on ASynK because
I was unhappy with the state of sync solutions for Android and MS Outlook
(more on this later). Subsequently I added BBDB support and the made the
application flexible enough that I can sync my contacts between BBDB and MS
Outlook directly. Google has no tools to do that, of course. Further, the
platform is flexible enough to add support for any number of additional PIM
data providers.

Fundamentally, Google does not have a coherent and integrated strategy for
Personal Information Management (PIM). Contacts, Calendar, Notes and Tasks are
unrelated products with big differences in their APIs. The Tasks program
itself is of very limited functionality. This applies equally to Android as
well as for the cloud products. So it is hardly surprising that they do not
have a tightly integrated PIM sync solution for Android like Blackberry and
Nokia's sync software with MS Outlook, say.

Google does provide a few options for people who want to get data into their
Google account from Outlook.

@enumerate
@item 
A two-way Contacts sync tool for customers of their 'Google Apps for Business
users'. That is to say, it is not available for regular non-paying customers
like you and me. I haven't tried this even once.

@item
A one-way migration Contacts migration tool from MS Outlook, which only works
if you are saying goodbye to Outlook and moving home to Android. This is not
practical for people who use Outlook at work, but who want to use their
contacts on Android on their phone.

Even if you're willing to keep all your edits in Outlook, there are various
other problems: 

@itemize 
@item
It is so slow it is impractical for frequent use - migrating 1000 contacts
took more than 10 minutes. ASynK takes roughly a tenth of that time.

@item
It is very inflexible: all contacts get dumped in your 'My Contacts' mother
group. If you would like to neatly isolate your Outlook contacts neatly into a
separate group, no go.

@item
Older versions of this tool had issues with extracting email addresses from
Outlook entries - EX email addresses for thos who care. Incidentally, this EX
email address problem plagues a number of sync solutions, inclunding an
otherwise excellent product from TouchDown for Outlook PST.
@end itemize

@item
A two-way Calendar sync tool that works quite well, and available for all
users, include retail consumers. 

@item
And finally, their import from CSV. Let's just say, if you're happy with this
option you wouldn't be reading this right now.
@end enumerate

@subsection What is wrong with tools from HTC and other vendors?

These tools generally sync with MS Outlook, but are not available easily for
generic Android users. For e.g. owners of the pure Google phones such as Nexus
S. Further these are closed source, and adding BBDB support is, well, not
possible.

@cindex Other Sync Programs

@subsection What is wrong wtih GoContactSync?

@url{http://sourceforge.net/projects/gocontactsync, GoContactSync} is a GPL-ed
two way sync solution between MS Outlook and Google Contacts. It has
favourable reviews on the general internet. The drawback is it is written in
.NET, a language I do not know and have no desire to learn at this
time. Python was versatile enough to work on Windows and Unix, and allowed me
to extend to a third PIM data provider (BBDB). As noted earlier, ASynK is the
only two way sync solution for BBDB today.

@cindex GoContactSync
@cindex Other Sync Programs

@node Copying, GNU FDL, FAQ, Top
@appendix GNU AGPL
@include agpl-3.0.texi

@node GNU FDL, The Index, Copying, Top
@appendix GNU FDL
@include doclicense.texi

@node The Index,  , GNU FDL, Top
@unnumbered Index

@printindex cp

@bye
