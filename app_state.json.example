// -*- javascript -*-

// Last Modified : Fri Mar 16 11:53:34 IST 2012
//
// Copyright (C) 2011, 2012 Sriram Karra <karra.etc@gmail.com>
// 
// Licenced under GPLv3

// The application uses a configuration file called app_state.json to
// keep a track of sync state and other configuration values. In the
// distribution app_state.json will have the same contents as this
// file. However it is updated during every run of the
// application to store the state of your sync.

// While modifying the app_state.json is allowed, ensure the
// application is not running at the time. But remember that the user
// should not *have* to edit the app_state.json file directly.

{ 
    // When file version changes there should be an option to
    // gracefully sense older config formats and migrate the formats
    // to the latest version. Such infra is not yet implemented FIXME.
    'file_version'    : 2,

    // This prefix is attached to all the Group names, labels
    // etc. that are created on Google, field names in BBDB etc. 
    'label_prefix'    : 'Gout',
    'label_separator' : ':',

    // The following two field are required for storing custom
    // properties for outlook contact entries. Custom properties are
    // needed to store the Google Contact ID or BBDB entry ID in
    // Outlook to 'link' them. 
    // 
    // gid will keep incrementing, with a new gid being consumed for
    // each new folder that is synched from either BBDB or Google to
    // Outlook. This relates to how we try to track each synched
    // folder to a distinct category name in Outlook.
    //
    // You definitely don't want to change the guid. You could play
    // around with the gid_next field if you understand the code and
    // know what you are doing.
    'olsync_guid'     : '{a1271100-ac2e-11e0-bc8b-0025644a821c}',
    'olsync_gid_next' : 0x8001,

    'sync_state'      :  {
	// the state of sync is for each pair of source types
	// supported by the system. As of version 2 of the config file
	// format we support BBDB, Google and Outlook, and we support
	// two way sync across any pair of sources among them. As a
	// result we have three configs appearing below. By convention
	// the key is a couple of two letter abbrevs reprentig the
	// PIMDBs and written in alphabetical order.

	'gc:ol' : {
	    // These values can be changed 
	    'last_sync_start' : "1980-07-28T16:10:58.96+05:30",
	    'last_sync_stop'  : "1980-07-18T13:23:12.96+05:30",

	    // Default direction in which to perform Sync. Values can
	    // be one of ['SYNC1WAY' or 'SYCN2WAY'].
	    'sync_dir'         : "SYNC2WAY",

	    // Direction in which to resolve conflicts if the same
	    // entry is modified both locally and in the google
	    // cloud. Values can be either GOOGLE or OUTLOOK - in full
	    // and case sensitive
	    'conflict_resolve' : 'ol',

	    'group_ids' : { 
		// The Google contact groups containing synched
		// contacts are tracked here with a 'group label :
		// google group id' map, where the google group ID is
		// a URL as used in the google contacts api.
		'gc' : {},

		// An analogous map on the Outlook side. The map will
		// be a label to gid (see above for the olsync_gid
		// field
		'ol' : {},
	    },
	},
    
	'bb:ol' : {
	    'last_sync_start'  : "1980-07-28T16:10:58.96+05:30",
	    'last_sync_stop'   : "1980-07-18T13:23:12.96+05:30",
	    'sync_dir'         : "SYNC2WAY",
	    'conflict_resolve' : 'ol',
	    'group_ids' : { 
		'bb' : {},	// there is no such thing as a BBDB
				// group at the moment... but wth
		'ol' : {},
	    },
	},
    
	'bb:gc' : {
	    'last_sync_start'  : "1980-07-28T16:10:58.96+05:30",
	    'last_sync_stop'   : "1980-07-18T13:23:12.96+05:30",
	    'sync_dir'         : "SYNC2WAY",
	    'conflict_resolve' : 'bb',
	    'group_ids' : { 
		'bb' : {},	// there is no such thing as a BBDB
				// group at the moment... but wth
		'gc' : {},
	    },
	},
    },
}
